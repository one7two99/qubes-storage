#!/bin/bash
set -euo pipefail

# Set storage Qube
STORAGE_VM="my-data"

# read current path in storage qube from the state file or setup the state file
STATEFILE="${XDG_CACHE_HOME:-$HOME/.cache}/qubes-storage-path"
mkdir -p "$(dirname "$STATEFILE")"
[ -f "$STATEFILE" ] || echo "." > "$STATEFILE"

# print available commands
usage() {
  echo qubes-storage v0.1 - updated
  echo
  echo "Usage:"
  echo "  qubes-storage ls [directory]      # short listing"
  echo "  qubes-storage ll [directory]      # long listing"
  echo "  qubes-storage pull <remote-file> [local-file]"
  echo "  qubes-storage push <local-file> [remote-file]"
  echo "  qubes-storage rm <remote-file>"
  echo "  qubes-storage cp <source> <dest>"
  echo "  qubes-storage mv <source> <dest>"
  echo "  qubes-storage mkdir <dirname>"
  echo "  qubes-storage rmdir <dirname>"
  echo "  qubes-storage stat <remote-file>"
  echo "  qubes-storage cd <directory>"
  echo "  qubes-storage pwd"
  echo "  qubes-storage pull-gui"
  echo "  qubes-storage push-gui"
  echo "  qubes-storage edit <remote-file>"
  echo
}

# Hilfsfunktionen zum Umgang mit Pfaden im Storage-Qube
get_current_path() {
  cat "$STATEFILE"
}

set_current_path() {
  echo "$1" > "$STATEFILE"
}

# Normalize path textually
normalize_remote() {
  local base="$1" add="$2" combined norm
  if [[ "${add}" = /* ]]; then
    combined="${add}"
  else
    base="${base:-.}"
    combined="${base}/${add}"
  fi
  norm="$(realpath -m "/${combined}")" || norm="/"
  norm="${norm#/}"
  [[ -z "$norm" ]] && norm="."
  printf '%s\n' "$norm"
}

# Resolve relative path against current remote dir
resolve_remote() {
  local base; base="$(get_current_path)"
  normalize_remote "$base" "${1:-.}"
}

# Keine Argumente → Hilfe anzeigen
if [ $# -lt 1 ]; then
  usage
  exit 0
fi

case "$1" in
  ls)
    REMOTE="$(resolve_remote "${2:-.}")"
    printf '%s\n' "$REMOTE" | qrexec-client-vm "$STORAGE_VM" user.StorageList
    ;;
  ll)
    REMOTE="$(resolve_remote "${2:-.}")"
    printf '%s\n' "$REMOTE" | qrexec-client-vm "$STORAGE_VM" user.StorageLs
    ;;
  pull)
    [ -z "${2:-}" ] && usage && exit 1
    SRC="$(resolve_remote "$2")"
    DST="${3:-$(basename "$2")}"
    if ! printf '%s\n' "$SRC" | qrexec-client-vm "$STORAGE_VM" user.StorageGet > "$DST"; then
      echo "Error: pull failed" >&2
      rm -f "$DST"
      exit 1
    fi
    ;;
  push)
    [ -z "${2:-}" ] && usage && exit 1
    LOCALFILE="$2"
    REMOTENAME="${3:-$(basename "$2")}"
    REMOTE="$(resolve_remote "$REMOTENAME")"
    { printf '%s\n' "$REMOTE"; cat -- "$LOCALFILE"; } | \
      qrexec-client-vm "$STORAGE_VM" user.StoragePut
    ;;
  rm)
    [ -z "${2:-}" ] && usage && exit 1
    REMOTE="$(resolve_remote "$2")"
    printf '%s\n' "$REMOTE" | qrexec-client-vm "$STORAGE_VM" user.StorageDelete
    ;;
  cp)
    SRC="$2"
    DST="$3"
    if [ -z "$SRC" ] || [ -z "$DST" ]; then
      echo "Usage: $0 cp <source> <dest>"
      exit 1
    fi
    SRC_R="$(resolve_remote "$SRC")"
    DST_R="$(resolve_remote "$DST")"
    { printf '%s\n%s\n' "$SRC_R" "$DST_R"; } | \
      qrexec-client-vm "$STORAGE_VM" user.StorageCopy
    ;;
  mv)
    SRC="$2"
    DST="$3"
    if [ -z "$SRC" ] || [ -z "$DST" ]; then
      echo "Usage: $0 mv <source> <dest>"
      exit 1
    fi
    SRC_R="$(resolve_remote "$SRC")"
    DST_R="$(resolve_remote "$DST")"
    { printf '%s\n%s\n' "$SRC_R" "$DST_R"; } | \
      qrexec-client-vm "$STORAGE_VM" user.StorageMove
    ;;
  mkdir)
    DIR="$2"
    if [ -z "$DIR" ]; then
      echo "Usage: $0 mkdir <dirname>"
      exit 1
    fi
    REMOTE="$(resolve_remote "$DIR")"
    printf '%s\n' "$REMOTE" | \
      qrexec-client-vm "$STORAGE_VM" user.StorageMkdir
    ;;
  rmdir)
    DIR="$2"
    if [ -z "$DIR" ]; then
      echo "Usage: $0 rmdir <dirname>"
      exit 1
    fi
    REMOTE="$(resolve_remote "$DIR")"
    printf '%s\n' "$REMOTE" | \
      qrexec-client-vm "$STORAGE_VM" user.StorageRmdir
    ;;
  stat)
    [ -z "${2:-}" ] && usage && exit 1
    REMOTE="$(resolve_remote "$2")"
    printf '%s\n' "$REMOTE" | qrexec-client-vm "$STORAGE_VM" user.StorageStat
    ;;
  cd)
    [ -z "${2:-}" ] && { echo "Usage: $0 cd <directory>"; exit 1; }
    NEW="$(normalize_remote "$(get_current_path)" "$2")"
    if printf '%s\n' "$NEW" \
        | qrexec-client-vm "$STORAGE_VM" user.StorageStat 2>/dev/null \
        | grep -q "directory$"; then
      set_current_path "$NEW"
      echo "Remote directory: $NEW"
    else
      echo "Error: $NEW is not an existing directory in the storage qube" >&2
    fi
    ;;
  pwd)
    echo "Remote directory: $(get_current_path)"
    ;;
pull-gui)
  CURRENT_DIR="$(get_current_path)"

  while true; do
    FILES=$(printf '%s\n' "$CURRENT_DIR" | qrexec-client-vm "$STORAGE_VM" user.StorageList 2>/dev/null || true)

    # Prepare dialog entries
    MENU_ITEMS=()

    # Add ".." unless at root
    if [ "$CURRENT_DIR" != "." ]; then
      MENU_ITEMS+=(".." ".. (go up)")
    fi

    # Add files/directories only if present
    if [ -n "$FILES" ]; then
      while IFS= read -r line; do
        [ -z "$line" ] && continue
        MENU_ITEMS+=("$line" "$line")
      done <<< "$FILES"
    fi

    # If no entries at all (only possible at root with no ".."), handle safely
    if [ ${#MENU_ITEMS[@]} -eq 0 ]; then
      echo "Directory is empty: $CURRENT_DIR"
      exit 1
    fi

    CHOICE=$(dialog --clear \
      --stdout \
      --no-tags \
      --menu "Browse: $CURRENT_DIR" \
      20 60 15 \
      "${MENU_ITEMS[@]}")

    clear

    # Handle cancel
    if [ -z "$CHOICE" ]; then
      echo "Canceled."
      exit 1
    fi

    # Handle ".." navigation
    if [ "$CHOICE" = ".." ]; then
      CURRENT_DIR="$(dirname "$CURRENT_DIR")"
      [ "$CURRENT_DIR" = "/" ] && CURRENT_DIR="."
      continue
    fi

    # Determine type of selected item
    REMOTE_PATH="$(normalize_remote "$CURRENT_DIR" "$CHOICE")"
    TYPE=$(printf '%s\n' "$REMOTE_PATH" \
      | qrexec-client-vm "$STORAGE_VM" user.StorageStat 2>/dev/null \
      | grep "directory" || true)

    if [ -n "$TYPE" ]; then
      # Directory → descend
      CURRENT_DIR="$REMOTE_PATH"
      continue
    else
      # File → pull and exit
      DEST_NAME="$(basename "$CHOICE")"
      if ! printf '%s\n' "$REMOTE_PATH" | qrexec-client-vm "$STORAGE_VM" user.StorageGet > "$DEST_NAME"; then
        echo "Error pulling file: $CHOICE" >&2
        exit 1
      fi
      echo "Pulled: $DEST_NAME"
      exit 0
    fi
  done
  ;;
  push-gui)
    FILE="$(zenity --file-selection --title="Datei zum Hochladen auswählen")"
    [ -z "$FILE" ] && echo "Abgebrochen" && exit 1
    REMOTENAME="$(basename "$FILE")"
    REMOTE="$(resolve_remote "$REMOTENAME")"
    { printf '%s\n' "$REMOTE"; cat -- "$FILE"; } | \
      qrexec-client-vm "$STORAGE_VM" user.StoragePut
    ;;
  edit)
    [ -z "${2:-}" ] && { echo "Usage: $0 edit <remote-file>"; exit 1; }
    FILE="$2"
    REMOTE="$(resolve_remote "$FILE")"
    TMP="$(mktemp)"
    if ! printf '%s\n' "$REMOTE" | qrexec-client-vm "$STORAGE_VM" user.StorageGet > "$TMP"; then
      rm -f "$TMP"
      exit 1
    fi
    ${EDITOR:-nano} "$TMP"
    { printf '%s\n' "$REMOTE"; cat -- "$TMP"; } | \
      qrexec-client-vm "$STORAGE_VM" user.StoragePut
    rm -f "$TMP"
    ;;
  -h|--help)
    usage
    ;;
  *)
    usage
    exit 1
    ;;
esac
